########Regular Expressions are huge time savers.

def isPhoneNumber(phoneNumber): #Format: 415-555-8978
    if len(phoneNumber)!=12:
        return False #Not phone number-sized
    for i in range(0,3):
        if not phoneNumber[i].isdecimal():
            return False #no area code
    if phoneNumber[3]!='-':
        return False #missing dash
    for i in range(4,7):
        if not phoneNumber[i].isdecimal():
            return False #no 1st 3 digits code
    if phoneNumber[7]!='-':
        return False #missing 2nd dash
    for i in range(8,12):
        if not phoneNumber[i].isdecimal():
            return False #missing last 4 digits code
    return True

print(isPhoneNumber('415-765-6789'))

######Application of above function...
message = 'Call me 415-765-5689 tomorrow, or at 415-765-3442 for my office line.'
foundNumber = False
for i in range(len(message)):
    chunk = message[i:i+12]
    if isPhoneNumber(chunk):
        print('Phone number found: '+chunk)
        foundNumber = True
if not foundNumber:
    print('Could not find any phone numbers')
    
###########Regular Expressions:
    #Regular expressions are mini-language for specifying text patterns. Writing code to do pattern matching without regular expressions is a huge pain.
    #Regex strings often use \ backslashes (like \d), so they are often raw strings:r'\d'
    #Import the re module first.
    #Call the re.compile() function to create a regex object.
    #Call the regex object's search() method to create a match object.
    #Call the match object's group() method to get the matched string.
    #\d is the regex for a numeric digit character
import re
phoneRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
match = phoneRegex.search('Call me 415-765-5689 tomorrow, or at 415-765-3442 for my office line.')
print(match.group())

#Findall searched items not just the 1st time.
phoneRegex.findall('Call me 415-765-5689 tomorrow, or at 415-765-3442 for my office line.')

#sub-groups....
phoneRegex = re.compile(r'(\d\d\d)-(\d\d\d-\d\d\d\d)')
match = phoneRegex.search('Call me 415-765-5689 tomorrow, or at 415-765-3442 for my office line.')
match.group(1)
match.group(2)

#A different phone-number format pattern : (415) 555-4242
phoneRegex = re.compile(r'\(\d\d\d\) \d\d\d-\d\d\d\d')
match = phoneRegex.search('Call me (415) 765-5689 tomorrow, or at (415) 765-3442 for my office line.')
match.group()

###########Pipe characters....
batRegex = re.compile(r'Bat(man|mobile|copter|bat)')
match = batRegex.search('Batmobile lost a wheel')
match.group()

    #if group() method does not have any matching regex, it throws an exception [AttributeError: 'NoneType' object has no attribute 'group']
    match = batRegex.search('Batmotorcycle lost a wheel')
    match.group()
    
    #How to handle this exception:
    match = batRegex.search('Batmotorcycle lost a wheel')
    if match != None: #search() returns None, if fails to find a matching regex
        match.group()
    else:
        print('no match found...')

#Recap: 
        #Groups are created in Regex strings with parentheses.
        #The 1st set of parentheses is group1, the 2nd is 2, and so on.
        #Calling group() or group(0) returns the full matching string, group(1) returns group 1's matching string, & so on.
        #Use \( & \) to match literal parentheses in the regex string.
        #The | pipe can match one of many possible groups.

################# 0/1/more no. of matches.....
    # 0/1 match...
import re
batRegex = re.compile(r'Bat(wo)?man')
match = batRegex.search('The Adventures of Batman')
match.group()

match = batRegex.search('The Adventures of Batwoman')
match.group()

match = batRegex.search('The Adventures of Batwowowoman')
if(match!=None):
    match.group()
else:
    print('match not found!')
    
############Tips: If we wanted to a regex object for the text "dinner?" (with the question mark), we would call: 
        #re.compile(r'dinner\?') '''Not the slash in \?'''
        #In above case, "dinner" is not optional, we are literally looking for a question mark: "dinner?"
    ####Applying 0/1 match with phonenumber pattern.........
phoneRegex = re.compile(r'(\d\d\d-)?\d\d\d-\d\d\d\d') #Making area code optional
match = phoneRegex.search('Call me 765-5689 tomorrow.')
match.group()

match = phoneRegex.search('Call me 123-765-5689 tomorrow.')
match.group()

    #####Applying 0 or more matching patterns...
batRegex = re.compile(r'Bat(wo)*man')
match = batRegex.search('The Adventures of Batman')
if(match!=None):
    print(match.group())
else:
    print('match not found!')

match = batRegex.search('The Adventures of Batwoman')
if(match!=None):
    print(match.group())
else:
    print('match not found!')

match = batRegex.search('The Adventures of Batwowowowoman')
if(match!=None):
    print(match.group())
else:
    print('match not found!')
    
        #####Applying 1 or more matching patterns...
batRegex = re.compile(r'Bat(wo)+man')
match = batRegex.search('The Adventures of Batman')
if(match!=None):
    print(match.group())
else:
    print('match not found!')

match = batRegex.search('The Adventures of Batwoman')
if(match!=None):
    print(match.group())
else:
    print('match not found!')

match = batRegex.search('The Adventures of Batwowowowoman')
if(match!=None):
    print(match.group())
else:
    print('match not found!')
    
    ######
regex = re.compile(r'\+\*\?')
match = regex.search('I learned about +*? regex syntax')
if(match!=None):
    print(match.group())
else:
    print('match not found!')
    
regex = re.compile(r'(\+\*\?)+')
match = regex.search('I learned about +*?+*?+*?+*?+*? regex syntax')
if(match!=None):
    print(match.group())
else:
    print('match not found!')
    
#Exact no. of match.........
haRegex = re.compile(r'(Ha){3}')    
match = haRegex.search('He said "HaHaHa"')
if(match!=None):
    print(match.group())
else:
    print('match not found!')
    
phoneRegex = re.compile(r'((\d\d\d-)?\d\d\d-\d\d\d\d(,)?){3}') #Exact 3 matches of phone numbers, optionally separated by comma
match = phoneRegex.search('My numbers are 765-5689,123-546-6424,776-534-8744 tomorrow.')
if(match!=None):
    print(match.group())
else:
    print('match not found!')
    
#Minimum/Maximum no. of matches... e.g. min 3, max 5 matches/repetitions....
haRegex = re.compile(r'(Ha){3,5}')    
match = haRegex.search('He said "HaHaHa"')
if(match!=None):
    print(match.group())
else:
    print('match not found!')

match = haRegex.search('He said "HaHaHaHa"')
if(match!=None):
    print(match.group())
else:
    print('match not found!')
    
match = haRegex.search('He said "HaHaHaHaHa"')
if(match!=None):
    print(match.group())
else:
    print('match not found!')
    
match = haRegex.search('He said "HaHaHaHaHaHaHaHa"')
if(match!=None):
    print(match.group()) #If it contains more matches, still will return max no. of matches with success
else:
    print('match not found!')
    
    #escaping min/max bound...(no min/max bound)
haRegex = re.compile(r'(Ha){,5}')    #means min=0, max=5  
match = haRegex.search('He said "HaHaHa"')
if(match!=None):
    print(match.group())
else:
    print('match not found!')
    
haRegex = re.compile(r'(Ha){3,}')    #means min=3, max= any no. of times  
match = haRegex.search('He said "HaHaHa"')
if(match!=None):
    print(match.group())
else:
    print('match not found!')
    
    ########Greedy match....()By default way of searching done by Regex
digitRegex = re.compile(r'(\d){3,5}')
match = digitRegex.search('1234567890')
if(match!=None):
    print(match.group())
else:
    print('match not found!')
    
    ########Non-Greedy match....
digitRegex = re.compile(r'(\d){3,5}?')
match = digitRegex.search('1234567890')
if(match!=None):
    print(match.group())
else:
    print('match not found!')

###################################################################################################################
###################################Regex character classes & the findall() method.....
import re
phoneRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d') #r - is rawstring here
phoneRegex
phoneRegex.search('Call me 415-765-5689 tomorrow, or at 415-765-3442 for my office line.') #search() returns Match objects.

    #The regex method findall() is passed a string, and returns all matches in it, not just the 1st match.
    #If the regex has 0 or 1 group, findall() returns a list of strings.
phoneRegex.findall('Call me 415-765-5689 tomorrow, or at 415-765-3442 for my office line.') # findall() returns a list of strings for 0 or 1 group.

    #If the regex has 2 or more groups, findall() returns a list of tuples of strings.
phoneRegex = re.compile(r'(\d\d\d)-(\d\d\d-\d\d\d\d)')
phoneRegex.findall('Call me 415-765-5689 tomorrow, or at 415-765-3442 for my office line.') # findall() returns a list of tuple of strings for 2 or more groups.

phoneRegex = re.compile(r'((\d\d\d)-(\d\d\d-\d\d\d\d))')
phoneRegex.findall('Call me 415-765-5689 tomorrow, or at 415-765-3442 for my office line.') # returns list of 2 tuples each having 3 strings.

    #\d is a shorthand character class that matches digits. \w matches word characters, \s matches whitespaces characters.
digitRegex = re.compile(r'\d') #==digitRegex = re.compile(r'(0|1|2|3|4|5|6|7|8|9)')
    
lyrics = '12 Drummers Drumming, 11 Pipers Piping, 10 Lords a Leaping, 9 Ladies Dancing, 8 Maids a Milking, 7 Swans a Swimming, 6 Geese a Laying, 5 Golden Rings, 4 Calling Birds, 3 French Hens, 2 Turtle Doves, and a Partridge in a Pear Tree'
xmasRegex = re.compile(r'\d+\s\w+')
xmasRegex.findall(lyrics)

#The uppercase shorthand character classes \D, \W, \S match characters that are NOT digits, word characters, and spaces.
#You can make your own character classes with square brackets: [aeiou]
vowelRegex = re.compile(r'[aeiouAEIOU]')
vowelRegex.findall('Robocop eats baby food')

vowelRegex = re.compile(r'[aeiouAEIOU]{2}')
vowelRegex.findall('Robocop eats baby food')

#A ^ caret makes it a negative character class, matching anything not in the brackets: [^aeiou]
consonantRegex = re.compile(r'[^aeiouAEIOU]')
consonantRegex.findall('Robocop eats baby food')


######################################################################################################################
####################Regex Dot-Star & the Caret /Dollar characters..................
#^ means the string must start with the pattern, $ means the string must end with the pattern. Both means the entire string must match the pattern.
import re
beginsWithHelloRegex = re.compile(r'^Hello')
beginsWithHelloRegex.search('Hello there!')

beginsWithHelloRegex.search('He said "Hello!"') == None


endsWithWorldRegex = re.compile(r'world!$')
endsWithWorldRegex.search('Hello world!')

endsWithWorldRegex.search('Hello world!sdsdSDdD')==None

allDigitsRegex = re.compile(r'^\d+$')
allDigitsRegex.search('34324341232432')

allDigitsRegex.search('3432434x1232432') == None

#The . dot is a wildcard; it matches anything except newlines.
atRegex = re.compile(r'.at')
atRegex.findall('The cat in the hat sat on the flat mat.')

atRegex = re.compile(r'.{1,2}at')
atRegex.findall('The cat in the hat sat on the flat mat.')

'First Name: Al Last Name: Sweigart'.find(':')
'First Name: Al Last Name: Sweigart'.find(':') + 2
'First Name: Al Last Name: Sweigart'[12:]

nameRegex = re.compile(r'First Name: (.*) Last Name: (.*)')
nameRegex.findall('First Name: Al Last Name: Sweigart')

    #(.*) is greedy, (.*?) is non-greedy
serve = '<To serve humans> for dinner.>'
nongreedy = re.compile(r'<(.*?)>')
nongreedy.findall(serve)

greedy = re.compile(r'<(.*)>')
greedy.findall(serve)

#Pass re.DOTALL as the 2nd argument to re.compile() to make the . dot match newlines as well.
prime = 'Serve the public trust.\nProtect the innocent.\nUpload the law.'
dotstar = re.compile(r'.*')
dotstar.search(prime)

dotstar = re.compile(r'.*',re.DOTALL)
dotstar.search(prime)


vowelRegex = re.compile(r'[aeiou]')
vowelRegex.search('Al, why does your programming book talk about Robocop so much?')

vowelRegex = re.compile(r'[aeiou]')
vowelRegex.findall('Al, why does your programming book talk about Robocop so much?')

vowelRegex = re.compile(r'[aeiou]',re.I)
vowelRegex.findall('Al, why does your programming book talk about Robocop so much?')
#Pass re.I as the 2nd argument to re.compile() to make the matching case-insensitive.


##############################################################################
################Regex sub() method and verbose mode...........
#The sub() regex method substitutes the matches with some other text.
import re
namesRegex = re.compile(r'Agent \w+')
namesRegex.findall('Agent Alice gave the secret documents to Agent Bob.')
namesRegex.sub('REDACTED','Agent Alice gave the secret documents to Agent Bob.')

#Using \1, \2, and so will substitute group 1, 2, etc in the regex pattern.
namesRegex = re.compile(r'Agent (\w)\w*')
namesRegex.findall('Agent Alice gave the secret documents to Agent Bob.')
namesRegex.sub(r'Agent \1****','Agent Alice gave the secret documents to Agent Bob.')

####VERBOSE.............
#Passing re.VERBOSE lets you add whitespace and comments to the regex string passed to re.compile(). It helps to add details of your complex regex.
import re
re.compile(r'''
           (\d\d\d-)|             # area code (without parentheses, with dash)
           (\(\d\d\d\))           # -or- area code with parentheses and no dash
           \d\d\d      # 1st 3 digits
           -           # 2nd dash
           \d\d\d\d    # last 4 digits     
           \sx\d{2,4}  #extension, like x1234''',re.VERBOSE)

#If you want to pass multiple arguments (re.DOTALL, re.IGNORECASE, re.VERBOSE), combine with them the | bitwise operator.           
re.compile(r'''
           (\d\d\d-)|             # area code (without parentheses, with dash)
           (\(\d\d\d\))           # -or- area code with parentheses and no dash
           \d\d\d      # 1st 3 digits
           -           # 2nd dash
           \d\d\d\d    # last 4 digits     
           \sx\d{2,4}  #extension, like x1234''',re.VERBOSE|re.I|re.DOTALL)


#######################################################################################################################
#######################Regex example program: A phone & email scraper
#! python 3
# TODO: Create a regex for phone numbers
    #To install pyperclip from conda run following command.
        #conda install -c bryanwweber pyperclip 
           
import re, pyperclip           
phoneRegex = re.compile(r'''
           #415-555-0000, 555-0000, (415) 555-0000, 555-0000 ext 12345, ext. 12345, x12345
           
           ((\d\d\d\)|(\(\d\d\d-\)))?          # area code (optional)
           (\s|-)         # first separator 
           \d\d\d         # first 3 digits
           -              # separator
           \d\d\d\d       # last 4 digits
           ((((ext(\.)?\s)|x)   # extension word-part(optional)
           (\d{2,5}))?         # extension number-part(optional)
           ''',re.VERBOSE)     

# TODO: Create a regex for email addresses
    #Tip: We don't need to use escape character (\) inside [] - square bracket
emailRegex = re.compile(r'''
                        # some.+_thing@(\d{2,5}))?.com
                        
[a-zA-Z0-9_.+]+                        # name part
@                                      # @ symbol
[a-zA-Z0-9_.+]+                        # domain name part
                        ''',re.VERBOSE)           
           
# TODO: Get the text off the clipboard
text = pyperclip.paste()
           
# TODO: Extract the email/phone from this text
phoneRegex = re.compile(r'((\d\d\d)-(\d\d\d-\d\d\d\d))')
extractedPhone = phoneRegex.findall(text)
extractedEmail = emailRegex.findall(text)

allPhoneNumbers = []
for phoneNumber in extractedPhone:
    allPhoneNumbers.append(phoneNumber[0])
print(allPhoneNumbers)

# TODO: Copy the extracted email/phone to the clipboard
results = '\n'.join(allPhoneNumbers) +'\n'+ '\n'.join(extractedEmail)
pyperclip.copy(results)
