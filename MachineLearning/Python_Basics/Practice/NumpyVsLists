import numpy as np
import time
import sys

######Size difference............
lst = range(2000)
numpArray = np.arange(2000)

print("size of list: ", sys.getsizeof(5)*len(lst))
print("size of numpy array: ", numpArray.size*numpArray.itemsize)

######Performance difference......
a = 10000000 #Size of the list & array
lst1 = range(a)
lst2 = range(a)

st = time.time()
aes = [(x,y) for x,y in zip(lst1,lst2)]
print("time taken by list: ", (time.time()-st)*1000)

npArray1 = np.arange(a)
npArray2 = np.arange(a)
sta = time.time()
ares = npArray1+npArray2
print("time taken by numpy array: ", (time.time()-sta)*1000)

#######Creating Arrays...........
ab = np.array([1,23,4,5])
type(ab)

#numpy.empty.....
aa = np.empty([3,2],dtype= int, order='C')
aa

aaF = np.empty([3,2],dtype= int, order='F')
aaF

np.empty_like(aaF,dtype=float)

np.eye(5,k=2)

np.identity(5)

np.ones(5)

np.ones([2,2,2])

np.zeros(5)

np.zeros((2,3))

z = np.full((5,4),fill_value="jh")

np.full_like(z,fill_value = np.inf)


np.arange(3)
np.arange(9.0)
np.arange(3,18,3)

np.linspace(1,5)
np.linspace(1,5,19)
np.linspace(1,5,19,endpoint=False)
np.linspace(1,5,19,retstep = True)


np.logspace(1,10)

np.logspace(1,5)

np.geomspace(2,15)

np.diag()
np.tri(5)
np.vander([1,2,3,6])

a = np.array([1,2,3,4])
b = np.array([10,20,30,40])

c = b*a
print(c)

np.multiply([2,3,5,6],[2,5,4,5])

#Decimal range
a = np.array([1.0,5.55,123,0.567,25.532])
print("Original array: ",a,"\n")
print("After rounding: ",np.around(a),"\n")
print(np.around(a,decimals=1))
print(np.around(a,decimals=-1))

#Power
a = np.array([10,100,1000])
print('Our array is: ',a,"\n")
print("Applying power function: ",np.power(a,2),"\n")

#Dot
a = np.array([[1,2],[3,4]])
b = np.array([[11,12],[13,14]])
print(np.dot(a,b))
print(np.vdot(a,b))
print(np.inner(a,b))
print(np.matmul(a,b))

#Determinant
print(np.linalg.det(a))

#Inverse
print(np.linalg.inv(a))

import sys
sys.maxsize

#random
import random
print(random.random())
print(random.randint(1,10))

from random import SystemRandom
crypto = SystemRandom()
print(crypto.random())

#random function
import random
def random_list(n, secure):
    random_floats = []
    if secure:
        crypto = random.SystemRandom()
        random_float = crypto.random()
    else:
        random_float = random.random()
        
    for i in range(n):
        random_floats.append(random_float)
    
    return random_floats

print(random_list(10,False))

#random choice
from random import choice
dataset = ["Vishal","Meenan","Arnav","Hello","Hi"]
print(choice(dataset))

#Weighted probabilities
def find_interval(x,partition):
    for i in range(0,len(partition)):
        if x < partition[i]:
            return i-1
    return -1

ds = [0,3,5,7.8, 9, 12, 13.8, 16]
for x in [-1.3, 0, 0.1, 3.2, 5, 6.2, 7.9, 10.8, 13.9, 15.0, 16, 16.5]:
    print(find_interval(x, ds),end=", ")



#Weighted Probabilities:
from collections import Counter
from random import choice
import numpy as np
import random

faces_of_die = [1,2,3,4,5,6]
weights = [1/12, 1/6, 1/6, 1/6, 1/6, 3/12]

outcome = []
n = 1000

T = [0,3,5,7,8,9,12,13.8,16]

def find_weighted_interval(x,partition,endpoints=True):
    for i in range(0,len(partition)):
        if x < partition[i]:
            return i-1 if endpoints else i
    return -1 if endpoints else len(partition)


def weighted_choice(sequence, weights, secure):
    if secure:
        crypto = random.SystemRandom()
        x = crypto.random()
    else:
        x = np.random.random()
    
    cum_weights = [0] + list(np.cumsum(weights))
    index = find_weighted_interval(x,cum_weights)
    return sequence[index]


print("Endpoints are included...")
for x in [-1.3, 0, 0.1, 3.2, 5, 6.2, 7.9, 10.8, 13.9, 15.0, 16, 16.5]:
    print(find_weighted_interval(x,T),end=", ")

print("Endpoints are included...")
for x in [-1.3, 0, 0.1, 3.2, 5, 6.2, 7.9, 10.8, 13.9, 15.0, 16, 16.5]:
    print(find_weighted_interval(x,T,endpoints=False),end=", ")


#weighted sample
def weighted_sample_choice(sequence, weights, secure=False):
    if secure:
        crypto = random.SystemRandom()
        x = crypto.random()
    else:
        x = np.random.random()
    
    cum_weights = [0] + list(np.cumsum(weights))
    index = find_weighted_interval(x,cum_weights)
    
    return sequence[index]

def weighted_sample(population, weights, k):
    sample = set()
    population = list(population)
    weights = list(weights)
    while len(sample)<k:
        choice = weighted_sample_choice(population,weights)
        if choice not in sample:
            sample.add(choice)
            
    return list(sample)
    
colors = ["Red","Green","Blue","Yellow","Black","White","Pink","Orange"]
weights = [1/24, 1/6, 1/6, 1/12, 1/12, 1/24, 1/8, 7/24]

n = 100000
orange_counter = 0
orange_counter_alternative = 0
for i in range(n):
    if "orange" in weighted_sample(colors,weights,3):
        orange_counter+=1

print(orange_counter/n)
