# =============================================================================
# Controlling the Mouse from Python
# =============================================================================
#Controlling the mouse and keyboard is called GUI automation.
import pyautogui #Install it through command: pip install pyautogui
#In progg, Y co-ordinates increase going down. This is the opposite of Y co-ordinates in maths.
#The PyAutoGUI 3rd party module has many functions to control the mouse & keyboard.


#pyautogui.size() returns the screen resolution, pyautogui.position() returns the mouse position, both as a tuple of 2 ints.
pyautogui.size() #Gives screen resolution. e.g. (1920,1080)
width, height = pyautogui.size()
width #1920
height #1080

pyautogui.position() #Current co-ordinates of mouse cursor.

#pyautogui.moveTo() moves the mouse to an x,y co-ordinate.
pyautogui.moveTo(700,700) # Moves mouse to provided co-ordinates

#The mouse move is instant, unless you pass an int for the duration keyword argument.
pyautogui.moveTo(700,700,duration = 1.5) # Moves mouse to provided co-ordinates

#pyautogui.moveRel() moves the mouse relative to it's current position.
pyautogui.moveRel(20,0)
pyautogui.moveRel(200,0)
pyautogui.moveRel(200,0,duration=2)
pyautogui.moveRel(0,-100)
pyautogui.moveRel(0,-100, duration=1)

#pyautogui's click(), doubleClick(), rightClick(), and middleClick() click the mouse buttons.
pyautogui.position() #Help menu position: 581,46
pyautogui.click(581,46) #To click Help menu, through it's co-ordinate
pyautogui.click()
pyautogui.doubleClick()
pyautogui.rightClick()
pyautogui.middleClick()

#dragTo() and dragRel() will move the mouses while holding down a mouse button.
pyautogui.dragTo(0,-100, duration=1)
pyautogui.dragRel(0,-100, duration=1)
#If your program gets out of control, quickly move the mouse cursor to the top-left.

pyautogui.displayMousePosition() #Press Ctrl+C to quit

#There's more documentation at pyautogui.readthedocs.org


# =============================================================================
# Controlling the Keyboard from Python
# =============================================================================
#payautogui's virtual key presses will go the window that currently has focus.
import pyautogui

#typewrite() can be passed a string of characters to type. It also has a interval keyword argument.
pyautogui.click(100,100) ; pyautogui.typewrite('Hello world!')
pyautogui.click(100,100) ; pyautogui.typewrite('Hello world!',interval=0.2)

#Passing a list of strings to typewrite() lets you hard-to-type keyboard keys, like 'shift' or 'f1'.
pyautogui.click(100,100) ; pyautogui.typewrite(['a','b','left','left','X','Y'], interval=1)

#These keyboard keys strings are in the pyautogui.KEYBOARD_KEYS list.
pyautogui.KEYBOARD_KEYS

#pyautogui.press() will press a single key.
pyautogui.press('F10')

#pyautogui.hotkey() can be used for keyboard shortcuts, like Ctrl+O.
pyautogui.hotkey('ctrl','s')
pyautogui.hotkey('ctrl','o')


# =============================================================================
# Screenshots and Image Recognition
# =============================================================================
import pyautogui

#A screenshot is an image of the screen's content.
pyautogui.screenshot()

#The pyautogui.screenshot() returns an image object of the screen, or we can pass it a filename to save it to a file.
pyautogui.screenshot(r'C:\Users\vishalk\Desktop\Spyder.png')

#locateOnScreen() is passed a sample image file, and returns the co-ordinates of where it is on the screen.
loc = pyautogui.locateOnScreen(r'C:\Users\vishalk\Desktop\Spyder.png')

#locateCenterOnScreen() returns a (x,y) tuple of where the image is on the screen.
loc = pyautogui.locateCenterOnScreen(r'C:\Users\vishalk\Desktop\Spyder.png')


########Combining the keyboard/mouse/screenshot functions let's us make awesome stuff! :)
